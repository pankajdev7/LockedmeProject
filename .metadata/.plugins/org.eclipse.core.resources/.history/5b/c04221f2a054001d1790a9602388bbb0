package com.lockedme;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Objects;

public class LockedMeBO {
	public void displayFilesInAscendingOrder(String directoryPath) {
		try {
			File f = new File(directoryPath);
			File files[] = f.listFiles();
			sort(files,files.length);
			for (File fileEntry : files) {
				if (fileEntry.isFile())
					System.out.println(fileEntry.getName());
				else if(fileEntry.isDirectory())
					displayFilesInAscendingOrder(fileEntry.getAbsolutePath());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void sort(File[] files, int n) {
		int x,j,swaps;
		File temp;
		for(x=n-2;x>=0;x--)
		{
			swaps=0;
			for(j=0;j<=x;j++)
			{
				if(files[j].getName().compareTo(files[j+1].getName())>0)
				{
					temp=files[j];
					files[j]=files[j+1];
					files[j+1]=temp;
					swaps++;
				}
			}
			if(swaps==0)
				break;
		}
	}

	public void addFile(String fileName, String directoryPath) {
		try {
			File directory = new File(directoryPath);
			if (directory.isDirectory()) {
				File f = new File(directoryPath + "/" + fileName);
				if (!f.exists()) {
					f.createNewFile();
				}
				else
				{
					System.out.println("File already existed");
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void deleteFile(String fileName, String directoryPath) {
		boolean isDeleted=false;
		boolean isExisted=false;
		try {
			File f = new File(directoryPath);
			File files[] = f.listFiles();
			for (File fileEntry : files) {
				if(fileEntry.getName().equals(fileName)) {
					isExisted=true;
					if(fileEntry.delete())
						isDeleted=true;
				}
			}
			if(isExisted && isDeleted)
				System.out.println("File deleted Successfully");
			else
				System.out.println("File is not existed to Delete");
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void searchFile(String fileName, String directoryPath) {
		boolean isExisted=false;
		try {
			File f = new File(directoryPath);
			File files[] = f.listFiles();
			for (File fileEntry : files) {
				if (fileEntry.isFile()) {
					if(fileEntry.getName().equals(fileName))
						isExisted=true;
					else if(fileEntry.isDirectory())
						displayFilesInAscendingOrder(fileEntry.getAbsolutePath());
						isExisted=true;
				}
			}
			if(isExisted)
				System.out.println("File is existed");
			else
				System.out.println("File is not existed in the directory");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	public boolean binarySearch(String fileName, int num) {
		  Objects.requireNonNull(fileName, "valid filename is required !");

		  // printFile(fileName);
		  try {
		   RandomAccessFile raf = new RandomAccessFile(fileName, "r");
		   int first = raf.readInt();
		   if (num == first)
		    return true;

		   int count = (int) (raf.length() >> 2);
		   int midIndex, midValue, endIndex = count - 1, startIndex = 0;

		   while (startIndex <= endIndex) {
		    midIndex = (endIndex + startIndex) >> 1;

		    // move file pointer to midIndex
		    raf.seek(midIndex * 4);

		    midValue = raf.readInt();
		    if (midValue == num) {
		     return true;
		    } else {
		     if (midValue > num) {
		      endIndex = midIndex - 1;
		     } else {
		      startIndex = midIndex + 1;
		     }
		    }
		   }
		   raf.close();
		  } catch (FileNotFoundException e) {
		   e.printStackTrace();
		  } catch (IOException e) {
		   e.printStackTrace();
		  }
		  return false;
		 }
}
